{
  "events": [
    {
      "act": "OPEN", 
      "size": [
        113, 
        51
      ], 
      "term": "d515af1a0a9b4d8091d82e80ef7848ba"
    }, 
    {
      "act": "PAUSE", 
      "duration": 0.4748702049255371
    }, 
    {
      "act": "WRITE", 
      "data": "\u001b]0;ncoghlan@lancre:~/devel/py34\u0007\u001b[?1034h[ncoghlan@lancre py34]$ ", 
      "term": "d515af1a0a9b4d8091d82e80ef7848ba"
    }, 
    {
      "act": "ECHO", 
      "data": "./python", 
      "term": "d515af1a0a9b4d8091d82e80ef7848ba"
    }, 
    {
      "act": "READ", 
      "data": "\r", 
      "term": "d515af1a0a9b4d8091d82e80ef7848ba"
    }, 
    {
      "act": "WRITE", 
      "data": "\r\n", 
      "term": "d515af1a0a9b4d8091d82e80ef7848ba"
    }, 
    {
      "act": "PAUSE", 
      "duration": 0.07145118713378906
    }, 
    {
      "act": "WRITE", 
      "data": "Python 3.4.1+ (3.4:a50297e793f9+, Jul 25 2014, 21:35:32) \r\n[GCC 4.8.3 20140624 (Red Hat 4.8.3-1)] on linux\r\nType \"help\", \"copyright\", \"credits\" or \"license\" for more information.\r\n", 
      "term": "d515af1a0a9b4d8091d82e80ef7848ba"
    }, 
    {
      "act": "PAUSE", 
      "duration": 0.0024118423461914062
    }, 
    {
      "act": "WRITE", 
      "data": "\u001b[?1034h>>> ", 
      "term": "d515af1a0a9b4d8091d82e80ef7848ba"
    }, 
    {
      "act": "ECHO", 
      "data": "import collections", 
      "term": "d515af1a0a9b4d8091d82e80ef7848ba"
    }, 
    {
      "act": "READ", 
      "data": "\r", 
      "term": "d515af1a0a9b4d8091d82e80ef7848ba"
    }, 
    {
      "act": "WRITE", 
      "data": "\r\n", 
      "term": "d515af1a0a9b4d8091d82e80ef7848ba"
    }, 
    {
      "act": "PAUSE", 
      "duration": 0.019906997680664062
    }, 
    {
      "act": "WRITE", 
      "data": ">>> ", 
      "term": "d515af1a0a9b4d8091d82e80ef7848ba"
    }, 
    {
      "act": "ECHO", 
      "data": "class MyTuple(collections.namedtuple(\"MyTuple\", \"a b c\")):", 
      "term": "d515af1a0a9b4d8091d82e80ef7848ba"
    }, 
    {
      "act": "READ", 
      "data": "\r", 
      "term": "d515af1a0a9b4d8091d82e80ef7848ba"
    }, 
    {
      "act": "WRITE", 
      "data": "\r\n... ", 
      "term": "d515af1a0a9b4d8091d82e80ef7848ba"
    }, 
    {
      "act": "ECHO", 
      "data": "    __slots++", 
      "term": "d515af1a0a9b4d8091d82e80ef7848ba"
    }, 
    {
      "act": "READ", 
      "data": "\u007f", 
      "term": "d515af1a0a9b4d8091d82e80ef7848ba"
    }, 
    {
      "act": "WRITE", 
      "data": "\b\u001b[K", 
      "term": "d515af1a0a9b4d8091d82e80ef7848ba"
    }, 
    {
      "act": "READ", 
      "data": "\u007f", 
      "term": "d515af1a0a9b4d8091d82e80ef7848ba"
    }, 
    {
      "act": "WRITE", 
      "data": "\b\u001b[K", 
      "term": "d515af1a0a9b4d8091d82e80ef7848ba"
    }, 
    {
      "act": "ECHO", 
      "data": "__ = ()", 
      "term": "d515af1a0a9b4d8091d82e80ef7848ba"
    }, 
    {
      "act": "READ", 
      "data": "\r", 
      "term": "d515af1a0a9b4d8091d82e80ef7848ba"
    }, 
    {
      "act": "WRITE", 
      "data": "\r\n... ", 
      "term": "d515af1a0a9b4d8091d82e80ef7848ba"
    }, 
    {
      "act": "READ", 
      "data": "\r", 
      "term": "d515af1a0a9b4d8091d82e80ef7848ba"
    }, 
    {
      "act": "WRITE", 
      "data": "\r\n", 
      "term": "d515af1a0a9b4d8091d82e80ef7848ba"
    }, 
    {
      "act": "PAUSE", 
      "duration": 0.0026328563690185547
    }, 
    {
      "act": "WRITE", 
      "data": ">>> ", 
      "term": "d515af1a0a9b4d8091d82e80ef7848ba"
    }, 
    {
      "act": "ECHO", 
      "data": "MyTuple", 
      "term": "d515af1a0a9b4d8091d82e80ef7848ba"
    }, 
    {
      "act": "READ", 
      "data": "\r", 
      "term": "d515af1a0a9b4d8091d82e80ef7848ba"
    }, 
    {
      "act": "WRITE", 
      "data": "\r\n<class '__main__.MyTuple'>\r\n>>> ", 
      "term": "d515af1a0a9b4d8091d82e80ef7848ba"
    }, 
    {
      "act": "ECHO", 
      "data": "MyTuple(1, 2, 3)", 
      "term": "d515af1a0a9b4d8091d82e80ef7848ba"
    }, 
    {
      "act": "READ", 
      "data": "\r", 
      "term": "d515af1a0a9b4d8091d82e80ef7848ba"
    }, 
    {
      "act": "WRITE", 
      "data": "\r\nMyTuple(a=1, b=2, c=3)\r\n>>> ", 
      "term": "d515af1a0a9b4d8091d82e80ef7848ba"
    }, 
    {
      "act": "ECHO", 
      "data": "import sys", 
      "term": "d515af1a0a9b4d8091d82e80ef7848ba"
    }, 
    {
      "act": "READ", 
      "data": "\r", 
      "term": "d515af1a0a9b4d8091d82e80ef7848ba"
    }, 
    {
      "act": "WRITE", 
      "data": "\r\n>>> ", 
      "term": "d515af1a0a9b4d8091d82e80ef7848ba"
    }, 
    {
      "act": "ECHO", 
      "data": "sys.getsizeof(MyTuple(1, 2, 3))", 
      "term": "d515af1a0a9b4d8091d82e80ef7848ba"
    }, 
    {
      "act": "READ", 
      "data": "\r", 
      "term": "d515af1a0a9b4d8091d82e80ef7848ba"
    }, 
    {
      "act": "WRITE", 
      "data": "\r\n88\r\n>>> ", 
      "term": "d515af1a0a9b4d8091d82e80ef7848ba"
    }, 
    {
      "act": "READ", 
      "data": "\u001b", 
      "term": "d515af1a0a9b4d8091d82e80ef7848ba"
    }, 
    {
      "act": "READ", 
      "data": "[", 
      "term": "d515af1a0a9b4d8091d82e80ef7848ba"
    }, 
    {
      "act": "READ", 
      "data": "A", 
      "term": "d515af1a0a9b4d8091d82e80ef7848ba"
    }, 
    {
      "act": "WRITE", 
      "data": "sys.getsizeof(MyTuple(1, 2, 3))", 
      "term": "d515af1a0a9b4d8091d82e80ef7848ba"
    }, 
    {
      "act": "READ", 
      "data": "\u001b", 
      "term": "d515af1a0a9b4d8091d82e80ef7848ba"
    }, 
    {
      "act": "READ", 
      "data": "[", 
      "term": "d515af1a0a9b4d8091d82e80ef7848ba"
    }, 
    {
      "act": "READ", 
      "data": "D", 
      "term": "d515af1a0a9b4d8091d82e80ef7848ba"
    }, 
    {
      "act": "WRITE", 
      "data": "\b", 
      "term": "d515af1a0a9b4d8091d82e80ef7848ba"
    }, 
    {
      "act": "READ", 
      "data": "\u001b", 
      "term": "d515af1a0a9b4d8091d82e80ef7848ba"
    }, 
    {
      "act": "READ", 
      "data": "[", 
      "term": "d515af1a0a9b4d8091d82e80ef7848ba"
    }, 
    {
      "act": "READ", 
      "data": "D", 
      "term": "d515af1a0a9b4d8091d82e80ef7848ba"
    }, 
    {
      "act": "WRITE", 
      "data": "\b", 
      "term": "d515af1a0a9b4d8091d82e80ef7848ba"
    }, 
    {
      "act": "READ", 
      "data": "\u001b", 
      "term": "d515af1a0a9b4d8091d82e80ef7848ba"
    }, 
    {
      "act": "READ", 
      "data": "[", 
      "term": "d515af1a0a9b4d8091d82e80ef7848ba"
    }, 
    {
      "act": "READ", 
      "data": "D", 
      "term": "d515af1a0a9b4d8091d82e80ef7848ba"
    }, 
    {
      "act": "WRITE", 
      "data": "\b", 
      "term": "d515af1a0a9b4d8091d82e80ef7848ba"
    }, 
    {
      "act": "READ", 
      "data": "\u001b", 
      "term": "d515af1a0a9b4d8091d82e80ef7848ba"
    }, 
    {
      "act": "READ", 
      "data": "[", 
      "term": "d515af1a0a9b4d8091d82e80ef7848ba"
    }, 
    {
      "act": "READ", 
      "data": "D", 
      "term": "d515af1a0a9b4d8091d82e80ef7848ba"
    }, 
    {
      "act": "WRITE", 
      "data": "\b", 
      "term": "d515af1a0a9b4d8091d82e80ef7848ba"
    }, 
    {
      "act": "READ", 
      "data": "\u001b", 
      "term": "d515af1a0a9b4d8091d82e80ef7848ba"
    }, 
    {
      "act": "READ", 
      "data": "[", 
      "term": "d515af1a0a9b4d8091d82e80ef7848ba"
    }, 
    {
      "act": "READ", 
      "data": "D", 
      "term": "d515af1a0a9b4d8091d82e80ef7848ba"
    }, 
    {
      "act": "WRITE", 
      "data": "\b", 
      "term": "d515af1a0a9b4d8091d82e80ef7848ba"
    }, 
    {
      "act": "READ", 
      "data": "\u001b", 
      "term": "d515af1a0a9b4d8091d82e80ef7848ba"
    }, 
    {
      "act": "READ", 
      "data": "[", 
      "term": "d515af1a0a9b4d8091d82e80ef7848ba"
    }, 
    {
      "act": "READ", 
      "data": "D", 
      "term": "d515af1a0a9b4d8091d82e80ef7848ba"
    }, 
    {
      "act": "WRITE", 
      "data": "\b", 
      "term": "d515af1a0a9b4d8091d82e80ef7848ba"
    }, 
    {
      "act": "READ", 
      "data": "\u001b", 
      "term": "d515af1a0a9b4d8091d82e80ef7848ba"
    }, 
    {
      "act": "READ", 
      "data": "[", 
      "term": "d515af1a0a9b4d8091d82e80ef7848ba"
    }, 
    {
      "act": "READ", 
      "data": "D", 
      "term": "d515af1a0a9b4d8091d82e80ef7848ba"
    }, 
    {
      "act": "WRITE", 
      "data": "\b", 
      "term": "d515af1a0a9b4d8091d82e80ef7848ba"
    }, 
    {
      "act": "READ", 
      "data": "\u001b", 
      "term": "d515af1a0a9b4d8091d82e80ef7848ba"
    }, 
    {
      "act": "READ", 
      "data": "[", 
      "term": "d515af1a0a9b4d8091d82e80ef7848ba"
    }, 
    {
      "act": "READ", 
      "data": "D", 
      "term": "d515af1a0a9b4d8091d82e80ef7848ba"
    }, 
    {
      "act": "WRITE", 
      "data": "\b", 
      "term": "d515af1a0a9b4d8091d82e80ef7848ba"
    }, 
    {
      "act": "READ", 
      "data": "\u001b", 
      "term": "d515af1a0a9b4d8091d82e80ef7848ba"
    }, 
    {
      "act": "READ", 
      "data": "[", 
      "term": "d515af1a0a9b4d8091d82e80ef7848ba"
    }, 
    {
      "act": "READ", 
      "data": "D", 
      "term": "d515af1a0a9b4d8091d82e80ef7848ba"
    }, 
    {
      "act": "WRITE", 
      "data": "\b", 
      "term": "d515af1a0a9b4d8091d82e80ef7848ba"
    }, 
    {
      "act": "READ", 
      "data": "\u001b", 
      "term": "d515af1a0a9b4d8091d82e80ef7848ba"
    }, 
    {
      "act": "READ", 
      "data": "[", 
      "term": "d515af1a0a9b4d8091d82e80ef7848ba"
    }, 
    {
      "act": "READ", 
      "data": "D", 
      "term": "d515af1a0a9b4d8091d82e80ef7848ba"
    }, 
    {
      "act": "WRITE", 
      "data": "\b", 
      "term": "d515af1a0a9b4d8091d82e80ef7848ba"
    }, 
    {
      "act": "READ", 
      "data": "\u007f", 
      "term": "d515af1a0a9b4d8091d82e80ef7848ba"
    }, 
    {
      "act": "WRITE", 
      "data": "\b\u001b[1P", 
      "term": "d515af1a0a9b4d8091d82e80ef7848ba"
    }, 
    {
      "act": "READ", 
      "data": "\u007f", 
      "term": "d515af1a0a9b4d8091d82e80ef7848ba"
    }, 
    {
      "act": "WRITE", 
      "data": "\b\u001b[1P", 
      "term": "d515af1a0a9b4d8091d82e80ef7848ba"
    }, 
    {
      "act": "READ", 
      "data": "\u007f", 
      "term": "d515af1a0a9b4d8091d82e80ef7848ba"
    }, 
    {
      "act": "WRITE", 
      "data": "\b\u001b[1P", 
      "term": "d515af1a0a9b4d8091d82e80ef7848ba"
    }, 
    {
      "act": "READ", 
      "data": "\u007f", 
      "term": "d515af1a0a9b4d8091d82e80ef7848ba"
    }, 
    {
      "act": "WRITE", 
      "data": "\b\u001b[1P", 
      "term": "d515af1a0a9b4d8091d82e80ef7848ba"
    }, 
    {
      "act": "READ", 
      "data": "\u007f", 
      "term": "d515af1a0a9b4d8091d82e80ef7848ba"
    }, 
    {
      "act": "WRITE", 
      "data": "\b\u001b[1P", 
      "term": "d515af1a0a9b4d8091d82e80ef7848ba"
    }, 
    {
      "act": "READ", 
      "data": "\u007f", 
      "term": "d515af1a0a9b4d8091d82e80ef7848ba"
    }, 
    {
      "act": "WRITE", 
      "data": "\b\u001b[1P", 
      "term": "d515af1a0a9b4d8091d82e80ef7848ba"
    }, 
    {
      "act": "READ", 
      "data": "\u007f", 
      "term": "d515af1a0a9b4d8091d82e80ef7848ba"
    }, 
    {
      "act": "WRITE", 
      "data": "\b\u001b[1P", 
      "term": "d515af1a0a9b4d8091d82e80ef7848ba"
    }, 
    {
      "act": "READ", 
      "data": "\u001b", 
      "term": "d515af1a0a9b4d8091d82e80ef7848ba"
    }, 
    {
      "act": "READ", 
      "data": "[", 
      "term": "d515af1a0a9b4d8091d82e80ef7848ba"
    }, 
    {
      "act": "READ", 
      "data": "F", 
      "term": "d515af1a0a9b4d8091d82e80ef7848ba"
    }, 
    {
      "act": "WRITE", 
      "data": "\u001b[C\u001b[C\u001b[C\u001b[C\u001b[C\u001b[C\u001b[C\u001b[C\u001b[C\u001b[C", 
      "term": "d515af1a0a9b4d8091d82e80ef7848ba"
    }, 
    {
      "act": "READ", 
      "data": "\r", 
      "term": "d515af1a0a9b4d8091d82e80ef7848ba"
    }, 
    {
      "act": "WRITE", 
      "data": "\r\n88\r\n>>> ", 
      "term": "d515af1a0a9b4d8091d82e80ef7848ba"
    }, 
    {
      "act": "ECHO", 
      "data": "import inspect", 
      "term": "d515af1a0a9b4d8091d82e80ef7848ba"
    }, 
    {
      "act": "READ", 
      "data": "\r", 
      "term": "d515af1a0a9b4d8091d82e80ef7848ba"
    }, 
    {
      "act": "WRITE", 
      "data": "\r\n", 
      "term": "d515af1a0a9b4d8091d82e80ef7848ba"
    }, 
    {
      "act": "PAUSE", 
      "duration": 0.09370112419128418
    }, 
    {
      "act": "WRITE", 
      "data": ">>> ", 
      "term": "d515af1a0a9b4d8091d82e80ef7848ba"
    }, 
    {
      "act": "ECHO", 
      "data": "print(sin", 
      "term": "d515af1a0a9b4d8091d82e80ef7848ba"
    }, 
    {
      "act": "READ", 
      "data": "\u007f", 
      "term": "d515af1a0a9b4d8091d82e80ef7848ba"
    }, 
    {
      "act": "WRITE", 
      "data": "\b\u001b[K", 
      "term": "d515af1a0a9b4d8091d82e80ef7848ba"
    }, 
    {
      "act": "READ", 
      "data": "\u007f", 
      "term": "d515af1a0a9b4d8091d82e80ef7848ba"
    }, 
    {
      "act": "WRITE", 
      "data": "\b\u001b[K", 
      "term": "d515af1a0a9b4d8091d82e80ef7848ba"
    }, 
    {
      "act": "READ", 
      "data": "\u007f", 
      "term": "d515af1a0a9b4d8091d82e80ef7848ba"
    }, 
    {
      "act": "WRITE", 
      "data": "\b\u001b[K", 
      "term": "d515af1a0a9b4d8091d82e80ef7848ba"
    }, 
    {
      "act": "ECHO", 
      "data": "inspect.getsource(collections.namedtuple))", 
      "term": "d515af1a0a9b4d8091d82e80ef7848ba"
    }, 
    {
      "act": "READ", 
      "data": "\r", 
      "term": "d515af1a0a9b4d8091d82e80ef7848ba"
    }, 
    {
      "act": "WRITE", 
      "data": "\r\n", 
      "term": "d515af1a0a9b4d8091d82e80ef7848ba"
    }, 
    {
      "act": "PAUSE", 
      "duration": 0.062393903732299805
    }, 
    {
      "act": "WRITE", 
      "data": "def namedtuple(typename, field_names, verbose=False, rename=False):\r\n    \"\"\"Returns a new subclass of tuple with named fields.\r\n\r\n    >>> Point = namedtuple('Point', ['x', 'y'])\r\n    >>> Point.__doc__                   # docstring for the new class\r\n    'Point(x, y)'\r\n    >>> p = Point(11, y=22)             # instantiate with positional args or keywords\r\n    >>> p[0] + p[1]                     # indexable like a plain tuple\r\n    33\r\n    >>> x, y = p                        # unpack like a regular tuple\r\n    >>> x, y\r\n    (11, 22)\r\n    >>> p.x + p.y                       # fields also accessable by name\r\n    33\r\n    >>> d = p._asdict()                 # convert to a dictionary\r\n    >>> d['x']\r\n    11\r\n    >>> Point(**d)                      # convert from a dictionary\r\n    Point(x=11, y=22)\r\n    >>> p._replace(x=100)               # _replace() is like str.replace() but targets named fields\r\n    Point(x=100, y=22)\r\n\r\n    \"\"\"\r\n\r\n    # Validate the field names.  At the user's option, either generate an error\r\n    # message or automatically replace the field name with a valid name.\r\n    if isinstance(field_names, str):\r\n        field_names = field_names.replace(',', ' ').split()\r\n    field_names = list(map(str, field_names))\r\n    typename = str(typename)\r\n    if rename:\r\n        seen = set()\r\n        for index, name in enumerate(field_names):\r\n            if (not name.isidentifier()\r\n                or _iskeyword(name)\r\n                or name.startswith('_')\r\n                or name in seen):\r\n                field_names[index] = '_%d' % index\r\n            seen.add(name)\r\n    for name in [typename] + field_names:\r\n        if type(name) != str:\r\n            raise TypeError('Type names and field names must be strings')\r\n        if not name.isidentifier():\r\n            raise ValueError('Type names and field names must be valid '\r\n                             'identifiers: %r' % name)\r\n        if _iskeyword(name):\r\n            raise ValueError('Type names and field names cannot be a '\r\n                             'keyword: %r' % name)\r\n    seen = set()\r\n    for name in field_names:\r\n        if name.startswith('_') and not rename:\r\n            raise ValueError('Field names cannot start with an underscore: '\r\n                             '%r' % name)\r\n        if name in seen:\r\n            raise ValueError('Encountered duplicate field name: %r' % name)\r\n        seen.add(name)\r\n\r\n    # Fill-in the class template\r\n    class_definition = _class_template.format(\r\n        typename = typename,\r\n        field_names = tuple(field_names),\r\n        num_fields = len(field_names),\r\n        arg_list = repr(tuple(field_names)).replace(\"'\", \"\")[1:-1],\r\n        repr_fmt = ', '.join(_repr_template.format(name=name)\r\n                             for name in field_names),\r\n        field_defs = '\\n'.join(_field_template.format(index=index, name=name)\r\n                               for index, name in enumerate(field_names))\r\n    )\r\n\r\n    # Execute the template string in a temporary namespace and support\r\n    # tracing utilities by setting a value for frame.f_globals['__name__']\r\n    namespace = dict(__name__='namedtuple_%s' % typename)\r\n    exec(class_definition, namespace)\r\n    result = namespace[typename]\r\n    result._source = class_definition\r\n    if verbose:\r\n        print(result._source)\r\n\r\n    # For pickling to work, the __module__ variable needs to be set to the frame\r\n    # where the named tuple is created.  Bypass this step in environments where\r\n    # sys._getframe is not defined (Jython for example) or sys._getframe is not\r\n    # defined for arguments greater than 0 (IronPython).\r\n    try:\r\n        result.__module__ = _sys._getframe(1).f_globals.get('__name__', '__main__')\r\n    except (AttributeError, ValueError):\r\n        pass\r\n\r\n    return result\r\n\r\n>>> ", 
      "term": "d515af1a0a9b4d8091d82e80ef7848ba"
    }, 
    {
      "act": "ECHO", 
      "data": "print(collections._class_template)", 
      "term": "d515af1a0a9b4d8091d82e80ef7848ba"
    }, 
    {
      "act": "READ", 
      "data": "\r", 
      "term": "d515af1a0a9b4d8091d82e80ef7848ba"
    }, 
    {
      "act": "WRITE", 
      "data": "\r\nfrom builtins import property as _property, tuple as _tuple\r\nfrom operator import itemgetter as _itemgetter\r\nfrom collections import OrderedDict\r\n\r\nclass {typename}(tuple):\r\n    '{typename}({arg_list})'\r\n\r\n    __slots__ = ()\r\n\r\n    _fields = {field_names!r}\r\n\r\n    def __new__(_cls, {arg_list}):\r\n        'Create new instance of {typename}({arg_list})'\r\n        return _tuple.__new__(_cls, ({arg_list}))\r\n\r\n    @classmethod\r\n    def _make(cls, iterable, new=tuple.__new__, len=len):\r\n        'Make a new {typename} object from a sequence or iterable'\r\n        result = new(cls, iterable)\r\n        if len(result) != {num_fields:d}:\r\n            raise TypeError('Expected {num_fields:d} arguments, got %d' % len(result))\r\n        return result\r\n\r\n    def _replace(_self, **kwds):\r\n        'Return a new {typename} object replacing specified fields with new values'\r\n        result = _self._make(map(kwds.pop, {field_names!r}, _self))\r\n        if kwds:\r\n            raise ValueError('Got unexpected field names: %r' % list(kwds))\r\n        return result\r\n\r\n    def __repr__(self):\r\n        'Return a nicely formatted representation string'\r\n        return self.__class__.__name__ + '({repr_fmt})' % self\r\n\r\n    @property\r\n    def __dict__(self):\r\n        'A new OrderedDict mapping field names to their values'\r\n        return OrderedDict(zip(self._fields, self))\r\n\r\n    def _asdict(self):\r\n        'Return a new OrderedDict which maps field names to their values.'\r\n        return self.__dict__\r\n\r\n    def __getnewargs__(self):\r\n        'Return self as a plain tuple.  Used by copy and pickle.'\r\n        return tuple(self)\r\n\r\n    def __getstate__(self):\r\n        'Exclude the OrderedDict from pickling'\r\n        return None\r\n\r\n{field_defs}\r\n\r\n>>> ", 
      "term": "d515af1a0a9b4d8091d82e80ef7848ba"
    }, 
    {
      "act": "READ", 
      "data": "\u0004", 
      "term": "d515af1a0a9b4d8091d82e80ef7848ba"
    }, 
    {
      "act": "WRITE", 
      "data": "\r\n", 
      "term": "d515af1a0a9b4d8091d82e80ef7848ba"
    }, 
    {
      "act": "PAUSE", 
      "duration": 0.02645087242126465
    }, 
    {
      "act": "WRITE", 
      "data": "\u001b]0;ncoghlan@lancre:~/devel/py34\u0007[ncoghlan@lancre py34]$ ", 
      "term": "d515af1a0a9b4d8091d82e80ef7848ba"
    }, 
    {
      "act": "READ", 
      "data": "\u0004", 
      "term": "d515af1a0a9b4d8091d82e80ef7848ba"
    }, 
    {
      "act": "WRITE", 
      "data": "exit\r\n", 
      "term": "d515af1a0a9b4d8091d82e80ef7848ba"
    }, 
    {
      "act": "CLOSE", 
      "term": "d515af1a0a9b4d8091d82e80ef7848ba"
    }
  ]
}